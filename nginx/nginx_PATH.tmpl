
{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}

# redirect URL
map $uri $redirect_uri {

{{ range $vhost, $containers := groupBy $ "Env.VIRTUAL_HOST" }}
  {{ range $container := $containers }}
  {{ $rule := $container.Env.RPROXY_RULE }}
  {{ if (eq $rule "redirect")  }}
    {{ range $knownNetwork := $CurrentContainer.Networks }}
      {{ range $containerNetwork := $container.Networks }}
        {{ if (or (eq $knownNetwork.Name $containerNetwork.Name) (eq $knownNetwork.Name "host")) }}

         {{ $port := $container.Env.VIRTUAL_PORT }}
	 {{ $address := where $container.Addresses "Port" $port | first }}

    ~^/{{ $vhost }}/(.*) http://{{ $containerNetwork.IP }}:{{ $address.Port }}/$1;

        {{ end }}
      {{ end }}
    {{ end }}
  {{ end }}
{{ end }}
{{ end }}

}


# upstreams config

{{ range $vhost, $containers := groupBy $ "Env.VIRTUAL_HOST" }}

    {{ range $container := $containers }}
    {{ $rule := $container.Env.RPROXY_RULE }}
    {{ if (eq $rule "")  }}

upstream {{ $vhost }} {

      {{ range $knownNetwork := $CurrentContainer.Networks }}
        {{ range $containerNetwork := $container.Networks }}
  	{{ if (or (eq $knownNetwork.Name $containerNetwork.Name) (eq $knownNetwork.Name "host")) }}
	      	  {{ $port := $container.Env.VIRTUAL_PORT }}
		  {{ $address := where $container.Addresses "Port" $port | first }}

    server {{ $containerNetwork.IP }}:{{ $address.Port }};

  	  {{ else }}

    # Cannot connect to network of this container
    server 127.0.0.1 down;

          {{ end }}
        {{ end }}
      {{ end }}
    {{ end }}

}

{{ end }}
{{ end }}

# server config

server {
    listen 80 default_server;
    root  /data;

    location / {
    }

    location /files/ {
      autoindex on;
    }

    location / {
      try_files $uri $uri/ @redirect-map;
    }
    location @redirect-map {
      return 302 $redirect_uri;
    }

    

{{ range $vhost, $containers := groupBy $ "Env.VIRTUAL_HOST"}}

    {{ range $container := $containers }}
    {{ $rule := $container.Env.RPROXY_RULE }}
    {{ if (eq $rule "")  }}

    location /{{ $vhost }}/ {
       rewrite ^/{{ $vhost }}/(.*)$ /$1 break;
       proxy_pass http://{{ $vhost }};
    }

    {{end}}
    {{end}}

{{end}}

}
