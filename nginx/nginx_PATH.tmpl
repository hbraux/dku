{{/* File syntax: https://golang.org/pkg/text/template/ */}}

{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}

# upstreams config

{{ range $host, $containers := groupBy $ "Env.VIRTUAL_HOST" }}

    {{ range $container := $containers }}

upstream {{ $host }} {

      {{ range $knownNetwork := $CurrentContainer.Networks }}
        {{ range $containerNetwork := $container.Networks }}
  	{{ if (or (eq $knownNetwork.Name $containerNetwork.Name) (eq $knownNetwork.Name "host")) }}
	      	  {{ $port := $container.Env.VIRTUAL_PORT }}
		  {{ $address := where $container.Addresses "Port" $port | first }}

    server {{ $containerNetwork.IP }}:{{ $address.Port }};

  	  {{ else }}

    # Cannot connect to network of this container
    server 127.0.0.1 down;

          {{ end }}
        {{ end }}
      {{ end }}
    {{ end }}

}

{{ end }}

# server config

server {
    listen 80 default_server;

    root  /data;

    location / {
        if ($request_method = OPTIONS ) {
    	    add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 200;
    	    }
    }
 
    location /files/ {
      autoindex on;
    }

    location /upload/ { 
      client_body_temp_path /data/files/upload;
      client_body_in_file_only on; 
      client_body_buffer_size 128K;
      client_max_body_size 50M;

      proxy_pass_request_headers on;
      proxy_set_header X-FILE $request_body_file; 

      proxy_set_body off;
      proxy_redirect off;
      proxy_pass http://localhost:8080/;
      }
      
{{ range $host, $containers := groupBy $ "Env.VIRTUAL_HOST"}}

    {{ range $container := $containers }}

      {{ if (eq $host "nifi") }}
    location /{{ $host }}/ {
       rewrite ^/{{ $host }}/(.*)$ /$1 break;
       proxy_set_header X-ProxyPort 80;
       proxy_set_header X-ProxyHost %HOST_HOSTNAME%;
       proxy_set_header X-ProxyContextPath /nifi;
       proxy_pass http://{{ $host }};
    }
      {{ else }}
    
    location /{{ $host }}/ {
       rewrite ^/{{ $host }}/(.*)$ /$1 break;
       proxy_pass http://{{ $host }};
    }

      {{end}}
    {{end}}


{{end}}

}
