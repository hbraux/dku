#!/bin/bash
# A docker wrapper to build, run and manage Docker images

TOOL_NAME=dku
TOOL_VERS=0.0.7


###############################################################################
# BEGIN: common.sh 2.3
###############################################################################
# Warning versions 2.x are not compatible with 1.x

[[ -n $TOOL_NAME ]] || TOOL_NAME=${0/.sh/}

# -----------------------------------------------------------------------------
# Shell Colors
# -----------------------------------------------------------------------------
declare BLACK="\e[m"
declare RED="\e[1;31m"
declare GREEN="\e[0;32m"
declare BLUE="\e[0;34m"
declare PURPLE="\e[1;35m"
declare BOLD="\e[1;30m"

# -----------------------------------------------------------------------------
# Global variables that can be used anywhere
# -----------------------------------------------------------------------------

# Temporary File and Directory (purged on exit)
declare TmpFile=$HOME/tmp.${TOOL_NAME}_f$$
declare TmpDir=$HOME/tmp.${TOOL_NAME}_d$$

# Log file (appending)
declare LogFile=${TOOL_NAME}.log
# by defaults logs are in current directory unless there's a logs directory
[[ -d $HOME/logs ]] && LogFile=$HOME/logs/$LogFile

# command line parameters
declare Command=
declare Arguments=

# -----------------------------------------------------------------------------
# Internal variables (reserved for common part)
# -----------------------------------------------------------------------------

# file cheksum, updated when commiting in Git
_MD5SUM="f6ca08f9aa86fb7528f82976a17308f0"

# config file
declare _CfgFile=$(dirname $0)/.${TOOL_NAME}.cfg

# command line Options
declare -A _Opts

# -----------------------------------------------------------------------------
# Log functions
# -----------------------------------------------------------------------------
# logging is by default to stdout, unless -L is specified

function _log {
  level=$1
  shift
  dt=$(date +'%F %T')
  echo -e "$level\t$dt\t$*" >>$LogFile
}

function debug {
  [[ ${_Opts[D]} -eq 1 ]] || return
  [[ ${_Opts[L]} -eq 1 ]] && _log DEBUG $* && return
  echo -e "${BLUE}# $*${BLACK}"
}
function info {
  [[ ${_Opts[L]} -eq 1 ]] && _log INFO $* && return
  echo -e "${BOLD}$*${BLACK}"
}
function warn {
  [[ ${_Opts[L]} -eq 1 ]] && _log WARN $* && return
  echo -e "${PURPLE}WARNING: $*${BLACK}"
}
function error {
  [[ ${_Opts[L]} -eq 1 ]] &&  _log ERROR $* 
  # always print errors to stdout
  echo -e "${RED}ERROR: $*${BLACK}"
}

# -----------------------------------------------------------------------------
# quit and die functions
# -----------------------------------------------------------------------------

function quit {
  if [[ $# -eq 0 ]]
  then exitcode=0
  else exitcode=$1
  fi
  [[ -f $TmpFile ]] && rm -f $TmpFile
  [[ -d $TmpDir ]] && rm -fr $TmpDir
  exit $exitcode
}

function die {
  if [[ $# -eq 0 ]]
  then error "command failed"
  else error "$*"
  fi
  quit 1
}

# -----------------------------------------------------------------------------
# internal functions
# -----------------------------------------------------------------------------
# load config file and check expected variables 
function _loadcfg {
  if [[ -f $_CfgFile ]]
  then 
     # check that syntax is consistent
     [[ $(egrep -v '^#' $_CfgFile | egrep -v '^[ ]*$' | egrep -vc '^[A-Z_]*_=') -eq 0 ]] || die "Config file $_CfgFile is not correct"
     # load by sourcing it (stop on error)
     set -e 
     . $_CfgFile 
     set +e
  fi
}

# set supported options 
function _setopts {
  for ((i=0; i<${#1}; i++ ))
  do _Opts[${1:$i:1}]=0
  done
  # option Debug (-D) and Log (-L) are always supported
  _Opts[D]=0
  _Opts[L]=0
}

# read options -X in command line
function _readopts {
  # ignore arguments --xxx
  [[ ${1:0:2} == -- ]] && return 1
  if [[ ${1:0:1} == - ]]
  then
    for ((i=1; i<${#1}; i++ ))
    do o=${1:$i:1}
       [[ -n ${_Opts[$o]} ]] || die "option -$o not supported by $TOOL_NAME"
       _Opts[$o]=1
    done
  else return 1
  fi 
}

# display tool name and version
function _about {
  suffix=""
  [[ $(egrep -v '^_MD5SUM=' $0 | /usr/bin/md5sum | sed 's/ .*//') \
      != $_MD5SUM ]] && suffix=".draft"
  echo "# $TOOL_NAME $TOOL_VERS$suffix"
}

# -----------------------------------------------------------------------------
# public functions
# -----------------------------------------------------------------------------

# opt X check if option -X was set (return 0 if true) 
function opt {
  if [[ -z ${_Opts[${1}]} ]]
  then echo -e "${RED}CODE ERROR: missing option -$1 in init${BLACK}"; exit 1
  fi
  [[ ${_Opts[${1}]} -eq 1 ]] || return 1
}


# analyse command line and set $Command $Arguments and options
# the first arguments are supported options, the second $@ 
function init {
  # _about
  if [[ ${1:0:1} == - ]]
  then _setopts ${1:1} ; shift
  fi
  [[ $# -eq 0 ]] && usage
  _loadcfg
  cmdline=$@
  Command=$1
  shift
  # read options (support -abc but also -a -b -c)
  while _readopts $1
  do shift ;done
  Arguments=$@
  opt L && _log INFO "COMMAND: $TOOL_NAME.sh $cmdline"
}


###############################################################################
# END: common.sh
###############################################################################

# ------------------------------------------
# Constants
# ------------------------------------------

# unless env variable IMAGE_REPO is defined, the repo is the username 
DKU_REPO=${IMAGE_REPO:-${USER,,}}

# ------------------------------------------
# Configuration Parameters (loaded from Config file)
# ------------------------------------------
# shall be in upper cases and end with an underscore

# name of user-defined bridge network 
DKU_NETWORK_=udn  


# ------------------------------------------
# Global variables
# ------------------------------------------

declare Proxy
declare DockerDir
declare DockerImg
declare DockerContainer
declare DockerVolume
declare RunJar
declare RunOpts
declare -i DockerTty=1
declare -i DockerMount=0

# ------------------------------------------
# usage
# ------------------------------------------

function usage {
  echo "Usage: $TOOL_NAME command [options] arguments*

Options:
  -c : cache files in nginx server for the build 
  -f : force
  -v : verbose

commands:
 status            : docker status (default if no command is given))
 help              : show this message
 list              : list available builds (aliases)
 build   <alias>   : build an image
 rebuild <alias>   : rebuild an image
 info    <alias>   : image's information
 [run]   <alias> ..: starts a container using image ('run' is optional)
 exec    <alias> ..: execute a command inside a running container
 submit  <alias> ..: submit a jar or an application to a container
 logs    <alias>   : show container logs
 stop    <alias>   : stop a container  
 start   <alias>   : start a container  
 destroy <alias>   : stop a container and remove associated ressources
 test    <alias>   : test a docker image
 clean             : cleanup pruned containers 
"
  quit
}

# ------------------------------------------
# Implementation 
# ------------------------------------------

function getProxy {
  [[ -n $Proxy ]] && return
  Proxy=${Proxy:-$http_proxy}
  export http_proxy=
  export https_proxy=
}


# small helper to display the docker command being run
function _docker {
  opt q || info "\$ docker $*"
  docker $*
}

function dockerCheck {
  getProxy
  which docker >/dev/null 2>&1 || die "Docker not installed"
  id | grep -q '(docker)' || die "$USER does not be belong to docker group"
  _docker network ls | grep -q $DKU_NETWORK_ 
  if [[ $? -ne 0 ]]; then
    info "This is the first time $TOOL_NAME is run. Creating User-defined bridged network '$DKU_NETWORK_ (required for DNS resolution between containers)."
    docker network create --driver bridge $DKU_NETWORK_ || die
    # create the cache directory for Nginx
    mkdir -p $HOME/cache
    echo -e "\nRun '$TOOL_NAME help' to show available commands"
    exit 0
  fi
  if [[ -z $DOCKER_GID ]]; then
    export DOCKER_GID=$(grep docker /etc/group |cut -d: -f3)
  fi

}

function getDockerImg {
  [[ $# -ge 1 ]] || usage
  arg=$1
  dockerCheck
  # if argument is a directory, use urrent directory as image name
  if [[ -d $arg ]]; then
    DockerDir=$arg
    [[ $DockerDir == . ]] && DockerDir=$(pwd)
    DockerImg=${DockerDir##*/}
  else 
    # in case argument starts by repo, strip it
    [[ ${arg%/*} == $DKU_REPO ]] && arg=${arg#*/}
    gitdir=$(readlink -f $0)
    gitdir=$(dirname $gitdir)
    gitdir=${gitdir/\/bin/}
    # otherwise check if a directory with image name exists
    if [[ -d $gitdir/$arg ]]; then
      DockerImg=$arg
      DockerDir=$gitdir/$DockerImg
    else
      # or with alpine + image
      if [[ -d $gitdir/alpine-$arg ]]; then
	DockerImg=alpine-$arg
	DockerDir=$gitdir/$DockerImg
      else
	pwd=$(pwd)
	[[ ${pwd##*/} == $arg ]] || die "no alias named '$arg'"
	DockerDir=$pwd
	DockerImg=$arg
      fi
    fi
  fi
  [[ -f $DockerDir/Dockerfile ]] || die "No file $DockerDir/Dockerfile"
  # Using the image name for container's name
  DockerContainer=${DockerImg}
  # as  well for the volume name
  DockerVolume=${DockerImg}
}



function dockerBuild {
  id=$(docker images -q ${DKU_REPO}/${DockerImg} |head -1)
  if [[ -n $id ]]; then
    warn "Image $DockerImg [$id] already built"
    opt f || return
    docker rmi -f --no-prune  $id
  fi
  for from in $(grep '^FROM' $DockerDir/Dockerfile | awk '{print $2}'); do
    if [[ ${from:0:3} == dku ]] ; then
      docker images | awk '{ print $1":"$2 }' |  grep -q $from \
	|| die "missing image $from -> $TOOL_NAME build $from"
    fi
  done
  egrep -q '^VOLUME \[' $DockerDir/Dockerfile \
    && die "$TOOL_NAME does not support VOLUME in JSON format"
  vers=$(egrep -i "^ENV ${DockerImg/alpine-}[A-Z]*_VERSION" $DockerDir/Dockerfile | head -1 | awk '{print $3}')
  [[ -n $vers ]] || warn "No VERSION found in Dockerfile"

  # cache the files
  opt c
  if [[ $? -eq 0 ]]; then
    site=$(grep 'ARG HTTP_MIRROR=' $DockerDir/Dockerfile  | cut -d= -f2)
    [[ -n $site ]] || die "Dockerfile is not using HTTP_MIRROR as ARG"
    ip=$(getent hosts $HOSTNAME | awk '{ print $1 }')
    export no_proxy=$no_proxy,$ip
    export HTTP_MIRROR=http://$ip/files
  fi
  # check if this a real image or an intermediate image
  egrep -q '^ENTRYPOINT' $DockerDir/Dockerfile
  if [[ $? -eq 0 ]]; then
    egrep -q '^USER ' $DockerDir/Dockerfile || \
      warn "No USER in Dockerfile (root is unsecure!)"
    egrep -q '^LABEL description ' $DockerDir/Dockerfile || \
      warn "No LABEL description in Dockerfile"
    egrep -q '^LABEL usage ' $DockerDir/Dockerfile || \
      warn "No LABEL usage in Dockerfile"
  fi
  # always add the tag latest to ease emac sdocker run
  tags="-t ${DKU_REPO}/$DockerImg:latest"
  [[ -n $vers ]] && tags="$tags -t ${DKU_REPO}/$DockerImg:$vers"

  buildargs="--build-arg http_proxy=$Proxy --build-arg https_proxy=$Proxy --build-arg no_proxy=$no_proxy"
  export IMAGE_REPO=$DKU_REPO
  for arg in $(egrep "^ARG " $DockerDir/Dockerfile | sed 's/ARG \([A-Z_]*\)=.*/\1/') 
  do [[ -n ${!arg} ]] && buildargs="$buildargs --build-arg $arg=${!arg}"
  done
  info "Building image from $DockerDir" 
  if [[ -x $DockerDir/build.sh ]]
  then info "$ build.sh $buildargs"
       cd $DockerDir && ./build.sh $tags $buildargs 
  else _docker build $tags $buildargs $DockerDir |tee $LogFile
  fi
  info "$ docker images .."
  docker images --format 'table{{.Repository}}:{{.Tag}}\t{{.ID}}\t{{.Size}}' --filter=reference='*/*:[0-9]*'
}


function dockerRun {
  id=$(docker images -q ${DKU_REPO}/${DockerImg} |head -1)
  [[ -n $id ]] || die "image ${DockerImg} is not built"
  args=$*
  if [[ $# -eq 0 && $(egrep -c 'docker run -d' $DockerDir/Dockerfile) -ge 1 ]] ; then 
    # server mode
    id=$(docker ps -a | grep "${DockerContainer}\$" | awk '{print $1}')
    if [[ -n $id ]]; then 
      _docker ps | grep -q "${DockerContainer}\$"
      if [ $? -eq 0 ]; then 
	warn "Container $DockerImg [$id] already running"
      else 
	_docker start $id
      fi
      return
    fi
    # first check for usage in label
    opts=$(dockerInfo | grep "usage:" | head -1 | sed -e "s~usage: docker run ~~;s~ ${DKU_REPO}/${DockerImg}\$~~" )
    if [[ -n $opts ]]; then
      opts=$(eval echo $opts)
    else
      opts="-d --name ${DockerContainer} --network $DKU_NETWORK_"
         volume=$(egrep '^VOLUME' $DockerDir/Dockerfile | awk '{print $2}')
         [[ -n $volume ]] && opts="$opts --mount source=${DockerVolume},target=$volume"
         for port in $(egrep '^EXPOSE ' $DockerDir/Dockerfile | cut -c 8-); do
	   grep -q '[$]' <<<$port
	   if [[ $? -ne 0 ]]; then 
	     opts="$opts -p $port:$port"
	   else
	     for ev in $(egrep '^ENV .*PORT' $DockerDir/Dockerfile | awk '{print "port=${port/\\$\\{" $2 "\\}/" $3 "}" }')
	     do eval $ev
             done
	     # echo "DEBUG: port=$port"
	     opts="$opts -p $port:$port"
	   fi
         done
         for e in $(env | egrep '^[A-Z_]*=' | egrep -v '^PATH=' | cut -d= -f1)
	 do egrep -q "^ENV $e " $DockerDir/Dockerfile && opts="$opts -e $e=${!e}"
         done
    fi
    # Check for addtional @RUNOPTS@ 
    grep -q '# @RUNOPTS@' $DockerDir/Dockerfile && opts="$opts "$(grep '# @RUNOPTS@' $DockerDir/Dockerfile | cut -c 12-)
    args=""
  else # command mode
    # if the first argument is an application name, push the JAR to container
    opts="-i --rm --network $DKU_NETWORK_ $RunOpts"
    if [[ $DockerMount -eq 1 ]] 
    then volume=$(egrep '^VOLUME' $DockerDir/Dockerfile | awk '{print $2}')
	    [[ -n $volume ]] && opts="$opts --mount source=${DockerVolume},target=$volume"
    fi
    [[ $DockerTty -eq 1 ]] && opts="-t $opts"       
  fi
  _docker run $opts ${DKU_REPO}/$DockerImg $args
}

function dockerExec {
  id=$(docker ps  | grep "${DockerContainer}\$" | awk '{print $1}')
  if [[ -z $id ]]; then
    warn "Container ${DockerContainer} not running"
    return 1
  fi 
  shift
  if [[ -n $RunJar ]]; then
    shift
    dockJar=/tmp/${RunJar##*/}
    docker cp $RunJar $id:$dockJar
    _docker exec $id entrypoint.sh submit $dockJar $@
  else
    _docker exec $id $@
  fi
}

function dockerStop {
  id=$(docker ps  | grep "${DockerContainer}\$" | awk '{print $1}')
  if [[ -z $id ]]
  then warn "Container ${DockerContainer} not running"
       return 1
  else _docker stop $id
  fi
}

function dockerStart {
  id=$(docker ps -a | grep "${DockerContainer}\$" | awk '{print $1}')
  if [[ -z $id ]]
  then warn "Container ${DockerContainer} not found"
       return 1
  else _docker start $id
  fi
}


function dockerDestroy {
  id=$(docker ps  -a | grep "${DockerContainer}\$" | awk '{print $1}')
  if [[ -z $id ]]
  then warn "No container ${DockerContainer}"
       return 1
  else 
    _docker stop $id
    _docker rm $id
    docker volume ls | grep -q $DockerVolume && _docker volume rm $DockerVolume
  fi
}

function dockerRebuild {
  _Opts[f]=1
  dockerDestroy
  dockerBuild
  dockerRun
  # wait for container to start
  sleep 4
  dockerLogs
}

function dockerStatus {
  dockerCheck
  opt v 
  if [[ $? -eq 0 ]]
  then 
    _docker images
    _docker ps -a
  else 
    info "$ docker images .."
    docker images --format 'table{{.Repository}}:{{.Tag}}\t{{.ID}}\t{{.Size}}' --filter=reference='*/*:[0-9]*'
    info "$ docker ps .."
    docker ps -a  --format 'table{{.Image}}:{{.Names}}\t{{.ID}}\t{{.Status}}'
  fi
  _docker volume ls
}

function dockerClean {
  dockerCheck
  _docker container prune -f
  for vol in $(docker volume ls -q)
  do grep -q "[0-9a-f]\{64\}" <<<$vol && _docker volume rm $vol
  done
  ids=$(docker images -f "dangling=true" -q)
  opt f && [[ -n $ids ]] && _docker rmi -f $ids
  dockerStatus
}

function dockerTest {
  testfile=$DockerDir/test-server.sh
  [[ -f $testfile ]] || die "No file $testfile"
  dockerDestroy 
  dockerBuild
  info "\nInfo about $DockerImg\n------------------------------------------"
  dockerInfo
  info "\nStarting $DockerImg\n------------------------------------------"
  dockerRun
  # wating 10 sec. for server to start
  sleep 10
  docker ps | grep -q " ${DockerContainer}"
  if [ $? -ne 0 ]
  then docker logs $DockerImg
       die "Server failed to start"
  fi
  # execute test file
  info "\nTesting $DockerImg health\n------------------------------------------"
  DockerTty=0 DockerMount=0 source $testfile |& tee $TmpFile || die
  grep -qi "exception \|error " $TmpFile
  [[ $? -eq 0 ]] && die 
  # check persistence (volume)
  testfile=$DockerDir/test-volume.sh
  if [[ -f $testfile ]] 
  then info "\nTesting $DockerImg persistence\n------------------------------------------"
       dockerStop
       sleep 1
       dockerRun
       sleep 5
       DockerTty=0 source $testfile  || die
  fi
  dockerDestroy
  info "\nTESTING OK"
}

function dockerLogs {
  _docker logs $DockerImg
} 

function dockerInfo {
  # output labels
  docker inspect --format='{{range $k,$v:=.Config.Labels}}{{$k}}: {{println $v}}{{end}}' ${DKU_REPO}/$DockerImg
}


function dockerExport {
  [[ $# -eq 2 ]] || usage
  target=$2
  info "docker save ${DKU_REPO}/$DockerImg  >$TmpFile"
  docker save ${DKU_REPO}/$DockerImg >$TmpFile || die
  # TODO: this may not work
  DOCKER_HOST=$target docker load -i $TmpFile || die
  rm $TmpFile
}

function listBuilds {
  d=$(readlink -f $0)
  cd $(dirname $d)/..
  info "Available builds:"
  for f in $(ls */Dockerfile); do
    desc=$(grep 'description ' $f | sed -e 's/" *$//g;s/^.* "//g;s/ ${.*}//')
    echo "${f%/*} : $desc"
  done
}


function dockerSubmit {
  [[ $# -ge 2 ]] || usage
  if [[ -f $2 ]]; then
      RunJar=$2
      [[ ${RunJar##*.} == "jar" ]] || die "$RunJar is not a JAR file"
  else
    appname=$2
    libdir=$HOME/.m2
    if [[ $appname == - ]] ; then 
        [[ -f build.sbt ]] || die "No argument provided and no build.sbt"
        appname=$(grep '^name ' build.sbt  | sed  's/.* "//;s/" *//')
        libdir=.
    fi
    RunJar=$(find $libdir -name "$appname*assembly*.jar" -print0 | xargs -0 ls -t |  grep $appname | head -1)
    [[ -f $RunJar ]] || die "cannot find $appname*-assembly.jar"
    info "Submitting $RunJar"
  fi
  # check if this is an interactive only image 
  grep '^LABEL usage ' $DockerDir/Dockerfile | grep -q ' -d '
  if [[ $? -eq 0 ]]; then
    dockerExec $*
  else
    RunOpts="-v ${RunJar%/*}:/mnt/run --name=${DockerImg/alpine-}"
    dockerRun submit /mnt/run/${RunJar##*/}
  fi
}

  
# ------------------------------------------
# Command Line
# ------------------------------------------


# analyse command line
if [[ $# -eq 0 ]]; then 
  init -fvq status
else 
  [[ $1 == -h ]] && usage
  init -fvcq $@
fi

case $Command in
  help)     usage;;
  list)     listBuilds;;
  build)    getDockerImg $Arguments; dockerBuild;;
  run)      getDockerImg $Arguments; dockerRun ${Arguments/$DockerImg/};;
  submit)   getDockerImg $Arguments; dockerSubmit $Arguments;;
  destroy)  getDockerImg $Arguments; dockerDestroy;;
  start)     getDockerImg $Arguments; dockerStart;;
  stop)     getDockerImg $Arguments; dockerStop;;
  test)     getDockerImg $Arguments; dockerTest;;
  exec)     getDockerImg $Arguments; dockerExec $Arguments;;
  logs)     getDockerImg $Arguments; dockerLogs;;
  info)     getDockerImg $Arguments; dockerInfo;;
  export)   getDockerImg $Arguments; dockerExport $Arguments;;
  rebuild)  getDockerImg $Arguments; dockerRebuild;;
  status)   dockerStatus;;
  clean)    dockerClean;;
  *) getDockerImg $Command; dockerRun $Arguments;;
esac


quit
